@import 'https://fonts.googleapis.com/css?family=Inconsolata';

html {
  min-height: 100%;
}

body {
  box-sizing: border-box;
  height: 100%;
  background-color: #000;
  background-image: radial-gradient(#11581e, #041607), url("https://media.giphy.com/media/oEI9uBYSzLpBK/giphy.gif");
  background-repeat: no-repeat;
  background-size: cover;
  font-family: 'Inconsolata', Helvetica, sans-serif;
  font-size: 1.5rem;
  color: rgba(128, 255, 128, 0.8);
  text-shadow: 0 0 1ex rgba(51, 255, 51, 1), 0 0 2px rgba(255, 255, 255, 0.8);
}

.input-box {
  display: flex;
  align-items: center;
}

.input-prefix {
  color: rgba(128, 255, 128, 0.8);
  text-shadow: 0 0 1px rgba(51, 255, 51, 0.4), 0 0 2px rgba(255, 255, 255, 0.8);
}

input.input {
  background: none;
  border: none;
  outline: none;
  color: rgba(128, 255, 128, 0.8);
  font-size: 1.5rem;
  font-family: 'Inconsolata', Helvetica, sans-serif;
  width: 100%;
}

#command-output {
  margin-top: 1rem;
  white-space: pre-wrap;
}

.noise {
  pointer-events: none;
  position: absolute;
  width: 100%;
  height: 100%;
  background-image: url("https://media.giphy.com/media/oEI9uBYSzLpBK/giphy.gif");
  background-repeat: no-repeat;
  background-size: cover;
  z-index: -1;
  opacity: 0.02;
}

.overlay {
  pointer-events: none;
  position: absolute;
  width: 100%;
  height: 100%;
  background: repeating-linear-gradient(180deg, rgba(0, 0, 0, 0) 0, rgba(0, 0, 0, 0.3) 50%, rgba(0, 0, 0, 0) 100%);
  background-size: auto 4px;
  z-index: 1;
}

.overlay::before {
  content: "";
  pointer-events: none;
  position: absolute;
  display: block;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  background-image: linear-gradient(0deg, transparent 0%, rgba(32, 128, 32, 0.2) 2%, rgba(32, 128, 32, 0.8) 3%, rgba(32, 128, 32, 0.2) 3%, transparent 100%);
  background-repeat: no-repeat;
  animation: scan 7.5s linear 0s infinite;
}

/* Style for the login box */
.login-box {
  border: 2px solid rgba(128, 255, 128, 0.8);
  border-radius: 10px;
  padding: 2rem;
  margin-top: 2rem;
  background-color: rgba(0, 0, 0, 0.5); /* Slight background to differentiate it from the terminal */
  max-width: 400px;
  margin-left: auto;
  margin-right: auto;
  box-shadow: 0 0 10px rgba(51, 255, 51, 0.8);
}

.input {
  background: none;
  border: 1px solid rgba(128, 255, 128, 0.8);
  padding: 0.5rem;
  color: rgba(128, 255, 128, 0.8);
  width: 100%;
  margin-bottom: 1rem;
  font-family: 'Inconsolata', Helvetica, sans-serif;
}

.error-message {
  color: red;
  margin-top: 1rem;
  font-weight: bold;
}

.btn {
  background-color: rgba(128, 255, 128, 0.2);
  color: rgba(128, 255, 128, 0.8);
  padding: 0.5rem 1rem;
  border: 1px solid rgba(128, 255, 128, 0.8);
  cursor: pointer;
  font-size: 1.2rem;
  text-transform: uppercase;
  margin-top: 1rem;
  width: 100%;
  transition: background-color 0.3s;
}

.btn:hover {
  background-color: rgba(128, 255, 128, 0.4);
}

@keyframes scan {
  0% {
    background-position: 0 -100vh;
  }
  35%, 100% {
    background-position: 0 100vh;
  }
}

.terminal {
  box-sizing: inherit;
  position: absolute;
  height: 100%;
  width: 1000px;
  max-width: 100%;
  padding: 4rem;
  text-transform: uppercase;
}

.output {
  color: rgba(128, 255, 128, 0.8);
  text-shadow: 0 0 1px rgba(51, 255, 51, 0.4), 0 0 2px rgba(255, 255, 255, 0.8);
}

a {
  color: #fff;
  text-decoration: none;
}

.boxx {
  padding: 0 50px 0 10px;
  border: 2px solid #656464;
  border-radius: 10px;
}

.boxx h2 {
  display: flex;
  align-items: center;
  gap: 2px;
}

@keyframes cursor-blink {
  0% {
   opacity: 0;
  }
}

.boxx h2::after {
  content: "";
  width: 5px;
  height: 20px;
  background: #ec7fff;
  display: inline-block;
  animation: cursor-blink 1.5s steps(2) infinite;
}

.box {
  padding: 0 50px 0 10px;
  border: 2px solid #656464;
  border-radius: 10px;
}

.box h2 {
  display: flex;
  align-items: center;
  gap: 2px;
}

.box h2::after {
  content: "";
  width: 5px;
  height: 20px;
  background: #ec7fff;
  display: inline-block;
  animation: cursor-blink 1.5s steps(2) infinite;
}

a::before {
  content: "[";
}

a::after {
  content: "]";
}

.errorcode {
  color: white;
}
